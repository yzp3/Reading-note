{"compress":true,"commitItems":[["c1bca196-b684-43a2-9d73-580582178756",1552036413925,"## C++\n### 1.sizeof\n\n```cpp\nclass A{\n\n}\nclass B{\npublic:\n      b(){\n      }\n      ~b(){\n      }\n}\nA a;\nB b;\n/*\n空类型的实例求sizeof本来是0，但声明实例时会占用一定的空间,\n在VS中每个空类型的实例占用1字节\n*/\ncout<<sizeof(a)<<endl;  //1 \n/*\n调用构造和析构函数只需要知道函数的地址，与类型的实例无关\n*/\ncout<<sizeof(b)<<endl;  //1\n```\n```cpp\nint GetSize(int data[]){\n    return sizeof(data);\n}\n\nint data1[] = {1,2,3,4,5};\nint size1 = sizeof(data1);//数组大小，5个整数*4字节=20\n\nint* data2 = data1;\nint size2 = sizeof(data2);//指针大小，4字节\n\nint size3 = GetSize(data1);//数组作为形参传递自动退化为指针\n\nprintf(\"%d%d%d\", size1, size2, size3);//20 4 4\n```\n### 2.构造函数传参\n```cpp\nclass A{\n    //构造函数形参是自己的一个实例，会无限递归调用导致栈溢出\n    A(A other){\n    }\n    //解决方法：把传值参数改成常量引用\n    A(const A& other){\n    }\n}\n```\n\n\n",[[1552036357587,["gc@DESKTOP-GC",[[1,693,"3"]],[693,693],[694,694]]],[1552036358471,["gc@DESKTOP-GC",[[-1,693,"3"]],[694,694],[693,693]]],[1552036379014,["gc@DESKTOP-GC",[[1,693,"### 3.纯虚函数虚函数"]],[693,693],[706,706]]],[1552036381761,["gc@DESKTOP-GC",[[1,703,"、"]],[703,703],[704,704]]],[1552036389615,["gc@DESKTOP-GC",[[1,707,"和普通函数的区别"]],[707,707],[715,715]]],[1552036390550,["gc@DESKTOP-GC",[[1,717,"\n"]],[715,715],[716,716]]],[1552036391132,["gc@DESKTOP-GC",[[1,718,"\n"]],[716,716],[717,717]]],[1552036407805,["gc@DESKTOP-GC",[[1,717,"### 4.struct和class的区别"]],[717,717],[738,738]]],[1552036408805,["gc@DESKTOP-GC",[[1,740,"\n"]],[738,738],[739,739]]],[1552036443714,["gc@DESKTOP-GC",[[1,563,"\n* * *\n\n"]],[562,562],[571,571]]],[1552036453962,["gc@DESKTOP-GC",[[1,563," * * *"]],[563,570],[569,569]]],[1552036470319,["gc@DESKTOP-GC",[[-1,563," * * *\n* * *\n\n"]],[569,569],[562,562]]],[1552036493266,["gc@DESKTOP-GC",[[1,563,"\n> \n\n"]],[562,562],[566,566]]],[1552036495332,["gc@DESKTOP-GC",[[-1,563,"\n> \n\n"]],[566,566],[562,562]]],[1552036500956,["gc@DESKTOP-GC",[[1,563,"\n@toc\n\n"]],[562,562],[570,570]]],[1552036502245,["gc@DESKTOP-GC",[[-1,563,"\n@toc\n\n"]],[570,570],[562,562]]],[1552036518208,["gc@DESKTOP-GC",[[1,550,"1. "]],[562,562],[565,565]]],[1552036519328,["gc@DESKTOP-GC",[[-1,550,"1. "]],[565,565],[562,562]]],[1552036525484,["gc@DESKTOP-GC",[[1,739,"### "]],[739,739],[743,743]]],[1552036528321,["gc@DESKTOP-GC",[[-1,739,"### "]],[743,743],[739,739]]],[1552036530650,["gc@DESKTOP-GC",[[1,739,"1. "]],[739,739],[742,742]]],[1552036534834,["gc@DESKTOP-GC",[[-1,739,"1."],[1,741,"* [ ]"]],[742,742],[745,745]]],[1552036539208,["gc@DESKTOP-GC",[[-1,741,"[ ] "]],[745,745],[741,741]]],[1552036550377,["gc@DESKTOP-GC",[[1,7,"\n"],[1,262,"\n"],[1,550,"\n"],[1,563,"\n"],[1,693,"\n"],[-1,739,"* "],[1,742,"- "]],[741,741],[0,0]]],[1552036832237,["gc@DESKTOP-GC",[[1,747,"默认的成员访问记基类继承"]],[747,747],[759,759]]],[1552036835417,["gc@DESKTOP-GC",[[1,760,"- \n"]],[759,759],[762,762]]],[1552036850065,["gc@DESKTOP-GC",[[1,762,"class”这个关键字还用于定义模板参数，就像“typename”。但关键字“struct”不用于定义模板参数"]],[762,762],[817,817]]],[1552036871310,["gc@DESKTOP-GC",[[1,759,"，struct-"]],[759,759],[767,767]]],[1552036872315,["gc@DESKTOP-GC",[[-1,766,"-"]],[767,767],[766,766]]],[1552036895563,["gc@DESKTOP-GC",[[1,766,"：public；class：private"]],[766,766],[787,787]]]],null,"gc@DESKTOP-GC"]]}